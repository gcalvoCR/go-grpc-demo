// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: memes.proto

package memespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemeServiceClient is the client API for MemeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemeServiceClient interface {
	// Unary RPC: Get one random meme
	GetRandomMeme(ctx context.Context, in *MemeRequest, opts ...grpc.CallOption) (*MemeResponse, error)
	// Unary RPC: Get memes by category
	GetMemesByCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*MemeList, error)
	// Server streaming: Meme feed
	StreamMemes(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (MemeService_StreamMemesClient, error)
	// Client streaming: Upload memes in bulk
	UploadMemes(ctx context.Context, opts ...grpc.CallOption) (MemeService_UploadMemesClient, error)
}

type memeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemeServiceClient(cc grpc.ClientConnInterface) MemeServiceClient {
	return &memeServiceClient{cc}
}

func (c *memeServiceClient) GetRandomMeme(ctx context.Context, in *MemeRequest, opts ...grpc.CallOption) (*MemeResponse, error) {
	out := new(MemeResponse)
	err := c.cc.Invoke(ctx, "/memes.MemeService/GetRandomMeme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memeServiceClient) GetMemesByCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*MemeList, error) {
	out := new(MemeList)
	err := c.cc.Invoke(ctx, "/memes.MemeService/GetMemesByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memeServiceClient) StreamMemes(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (MemeService_StreamMemesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MemeService_ServiceDesc.Streams[0], "/memes.MemeService/StreamMemes", opts...)
	if err != nil {
		return nil, err
	}
	x := &memeServiceStreamMemesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MemeService_StreamMemesClient interface {
	Recv() (*MemeResponse, error)
	grpc.ClientStream
}

type memeServiceStreamMemesClient struct {
	grpc.ClientStream
}

func (x *memeServiceStreamMemesClient) Recv() (*MemeResponse, error) {
	m := new(MemeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memeServiceClient) UploadMemes(ctx context.Context, opts ...grpc.CallOption) (MemeService_UploadMemesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MemeService_ServiceDesc.Streams[1], "/memes.MemeService/UploadMemes", opts...)
	if err != nil {
		return nil, err
	}
	x := &memeServiceUploadMemesClient{stream}
	return x, nil
}

type MemeService_UploadMemesClient interface {
	Send(*MemeUpload) error
	CloseAndRecv() (*UploadSummary, error)
	grpc.ClientStream
}

type memeServiceUploadMemesClient struct {
	grpc.ClientStream
}

func (x *memeServiceUploadMemesClient) Send(m *MemeUpload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memeServiceUploadMemesClient) CloseAndRecv() (*UploadSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MemeServiceServer is the server API for MemeService service.
// All implementations must embed UnimplementedMemeServiceServer
// for forward compatibility
type MemeServiceServer interface {
	// Unary RPC: Get one random meme
	GetRandomMeme(context.Context, *MemeRequest) (*MemeResponse, error)
	// Unary RPC: Get memes by category
	GetMemesByCategory(context.Context, *CategoryRequest) (*MemeList, error)
	// Server streaming: Meme feed
	StreamMemes(*StreamRequest, MemeService_StreamMemesServer) error
	// Client streaming: Upload memes in bulk
	UploadMemes(MemeService_UploadMemesServer) error
	mustEmbedUnimplementedMemeServiceServer()
}

// UnimplementedMemeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemeServiceServer struct {
}

func (UnimplementedMemeServiceServer) GetRandomMeme(context.Context, *MemeRequest) (*MemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomMeme not implemented")
}
func (UnimplementedMemeServiceServer) GetMemesByCategory(context.Context, *CategoryRequest) (*MemeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemesByCategory not implemented")
}
func (UnimplementedMemeServiceServer) StreamMemes(*StreamRequest, MemeService_StreamMemesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMemes not implemented")
}
func (UnimplementedMemeServiceServer) UploadMemes(MemeService_UploadMemesServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadMemes not implemented")
}
func (UnimplementedMemeServiceServer) mustEmbedUnimplementedMemeServiceServer() {}

// UnsafeMemeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemeServiceServer will
// result in compilation errors.
type UnsafeMemeServiceServer interface {
	mustEmbedUnimplementedMemeServiceServer()
}

func RegisterMemeServiceServer(s grpc.ServiceRegistrar, srv MemeServiceServer) {
	s.RegisterService(&MemeService_ServiceDesc, srv)
}

func _MemeService_GetRandomMeme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemeServiceServer).GetRandomMeme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/memes.MemeService/GetRandomMeme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemeServiceServer).GetRandomMeme(ctx, req.(*MemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemeService_GetMemesByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemeServiceServer).GetMemesByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/memes.MemeService/GetMemesByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemeServiceServer).GetMemesByCategory(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemeService_StreamMemes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MemeServiceServer).StreamMemes(m, &memeServiceStreamMemesServer{stream})
}

type MemeService_StreamMemesServer interface {
	Send(*MemeResponse) error
	grpc.ServerStream
}

type memeServiceStreamMemesServer struct {
	grpc.ServerStream
}

func (x *memeServiceStreamMemesServer) Send(m *MemeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MemeService_UploadMemes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemeServiceServer).UploadMemes(&memeServiceUploadMemesServer{stream})
}

type MemeService_UploadMemesServer interface {
	SendAndClose(*UploadSummary) error
	Recv() (*MemeUpload, error)
	grpc.ServerStream
}

type memeServiceUploadMemesServer struct {
	grpc.ServerStream
}

func (x *memeServiceUploadMemesServer) SendAndClose(m *UploadSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memeServiceUploadMemesServer) Recv() (*MemeUpload, error) {
	m := new(MemeUpload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MemeService_ServiceDesc is the grpc.ServiceDesc for MemeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "memes.MemeService",
	HandlerType: (*MemeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomMeme",
			Handler:    _MemeService_GetRandomMeme_Handler,
		},
		{
			MethodName: "GetMemesByCategory",
			Handler:    _MemeService_GetMemesByCategory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMemes",
			Handler:       _MemeService_StreamMemes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadMemes",
			Handler:       _MemeService_UploadMemes_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "memes.proto",
}
